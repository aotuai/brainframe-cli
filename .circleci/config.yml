version: 2.1

parameters:
  poetry-version:
    type: string
    default: "1.1.4"


executors:
  focal:
    docker:
      - image: cimg/base:stable-20.04
  bionic:
    docker:
      - image: cimg/base:stable-18.04


workflows:
  lint:
    jobs:
      - lint
  deb:
    jobs:
      - build-deb:
          matrix:
            parameters:
              os: [bionic, focal]
      - test-installation-deb:
          requires:
            - build-deb
  deploy:
    jobs:
      - upload-to-pypi:
          filters:
            # Ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # Run only when a tag is created
            tags:
              only: /^v.+\..+\..+/
      - build_binary
      - upload_binary:
          context: aws
          requires:
            - build_binary
  tests:
    jobs:
      - test-installation-source


jobs:
  lint:
    docker:
      - image: cimg/python:3.6
    steps:
      - checkout
      - run: poetry install --no-root
      - run: poetry run isort --check .
      - run: poetry run black --check .
      - run: poetry run mypy -p "brainframe.cli"

  build-deb:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install -y software-properties-common dpkg-dev devscripts equivs
      - run: sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
      - run: sudo apt-get install -y dh-virtualenv
      - install-poetry
      - checkout
      - run: cp -r package/debian .
      - run: cp package/setup.py .
      - run: cp package/system_package_defaults.yaml brainframe/cli/defaults.yaml
      - run: sudo mk-build-deps --install debian/control
      - run: poetry export --output requirements.txt
      - run: dpkg-buildpackage --unsigned-source --unsigned-changes --build=binary
      - run: mkdir dist
      - run: |
          export CODENAME=$(lsb_release --codename --short)
          mv ../brainframe-cli*.deb dist/brainframe-cli-${CODENAME}.deb
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist/*

  test-installation-deb:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run: sudo apt-get update
      - attach_workspace:
          at: /tmp/workspace
      - run: sudo apt-get install /tmp/workspace/dist/brainframe-cli-focal.deb
      - run: sudo brainframe install --noninteractive
      - run: sudo brainframe compose up -d
      - assert-core-container-running
      - assert-core-responds-to-http
      - run: sudo brainframe compose down

  upload-to-pypi:
    docker:
      - image: cimg/python:3.6
    environment:
      POETRY_HTTP_BASIC_PYPI_USERNAME: __token__

    steps:
      - checkout
      - run: poetry build
      - run: POETRY_HTTP_BASIC_PYPI_PASSWORD=${PYPI_PASSWORD} poetry publish

  test-installation-source:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install python3 python3-dev curl git -y
      - checkout
      - install-poetry
      - run: sudo $(which poetry) install
      - run: sudo $(which poetry) run brainframe install --noninteractive
      - run: sudo $(which poetry) run brainframe compose up -d
      - assert-core-container-running
      - assert-core-responds-to-http
      - run: sudo $(which poetry) run brainframe compose down

  build_binary:
    docker:
      # CentOS 7 is the oldest Linux distribution we unofficially support.
      # Building on here allows us to link to a very old version of libc,
      # which will work on all more modern distributions.
      - image: centos:7
    steps:
      - checkout
      - run: yum -y install python3
      - run: "curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
                  | python3 - --version << pipeline.parameters.poetry_version >>"
      # get-poetry.py doesn't seem to add Poetry to PATH properly on CentOS 7
      - run: echo 'export PATH=/root/.poetry/bin:$PATH' >> $BASH_ENV
      - run: poetry install --no-root
      - run: PYTHONPATH=$PYTHONPATH:. poetry run pyinstaller deployment/main.spec
      - persist_to_workspace:
          root: .
          paths:
            - dist/brainframe

  upload_binary:
    docker:
      - image: amazon/aws-cli:2.0.14
    steps:
      - run: yum -y install tar gzip
      - attach_workspace:
          at: /workspace
      - run: aws s3 cp /workspace/dist/brainframe s3://brainframe-releases-staging/releases/brainframe_cli/brainframe
      - run: aws cloudfront create-invalidation --distribution-id "$STAGING_CLOUDFRONT_DISTRIBUTION" --paths "/releases/brainframe_cli"


commands:
  install-poetry:
    steps:
      - run: sudo apt-get update && sudo apt-get install -y python3-pip
      - run: >
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python3 - --version << pipeline.parameters.poetry-version >>
      # Add to the PATH
      - run: echo 'export PATH=$HOME/.poetry/bin:$PATH' >> $BASH_ENV
  assert-core-container-running:
    steps:
      - run:
          name: Check BrainFrame core container is running
          command: |
            until docker container inspect -f {{.State.Running}}  $(docker ps -q -f name="brainframe_core") >/dev/null 2>/dev/null; do
                sleep 0.1;
            done;
            echo "BrainFrame core container is running."
          no_output_timeout: 1m
  assert-core-responds-to-http:
    steps:
      - run:
          name: Check BrainFrame core responds to HTTP requests
          command: |
            until curl -f http://localhost/api/version >/dev/null 2>/dev/null; do
              sleep 0.1;
            done;
            echo "BrainFrame core service is up."
          no_output_timeout: 1m
