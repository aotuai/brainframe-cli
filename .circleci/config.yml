version: 2.1

parameters:
  poetry-version:
    type: string
    default: "1.8.3"


executors:
  focal:
    docker:
      - image: aotuai/brainframe-cli-env-20.04:7d3e7d
  bionic:
    docker:
      - image: aotuai/brainframe-cli-env-18.04:7d3e7d


workflows:
  lint:
    jobs:
      - lint-approval:
          type: approval
          requires: []
      - lint:
          requires:
            - lint-approval
  build-and-test-deb:
    jobs:
      - build-approval:
          type: approval
          requires: []
      - build-deb:
          requires:
            - build-approval
          matrix:
            parameters:
              os: [bionic, focal]
      - test-installation-deb:
          requires:
            - build-deb
  build-and-upload-binary:
    jobs:
      - build-binary-approval:
          type: approval
          requires: []
      - build-binary:
          requires:
            - build-binary-approval
      - test-installation-binary:
          requires:
            - build-binary
      - push-to-staging-approval:
          type: approval
          requires:
            - build-binary
            - test-installation-binary
      - upload-binary:
          name: upload-binary-staging
          context: aws-staging
          requires:
            - push-to-staging-approval
      - push-to-production-approval:
          type: approval
          requires:
            - upload-binary-staging
      - upload-binary:
          name: upload-binary-production
          context: aws
          requires:
            - push-to-production-approval
          filters:
            # Ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # Run only when a tag is created
            tags:
              only: /^v.+\..+\..+/
  pypi-deploy:
    jobs:
      - push-to-pypi-approval:
          type: approval
          requires: []
      - upload-to-pypi:
          requires:
            - push-to-pypi-approval
          filters:
            # Ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # Run only when a tag is created
            tags:
              only: /^v.+\..+\..+/
  installation-tests:
    jobs:
      - test-approval:
          type: approval
          requires: []
      - test-installation-source:
          requires:
            - test-approval


jobs:
  lint:
    docker:
      - image: aotuai/brainframe-cli-env-20.04:7d3e7d
    steps:
      - checkout
      - run: cp /deployment/* ~/project/
      - run:
          working_directory: /deployment
          command: poetry run isort --check ~/project/
      - run:
          working_directory: /deployment
          command: poetry run black --check ~/project/
      - run: 
          working_directory: /deployment
          command: MYPYPATH=~/project/ poetry run mypy --config-file ~/project/mypy.ini -p "brainframe.cli"

  build-deb:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - run: apt-get update
      - run: apt-get install -y software-properties-common dpkg-dev devscripts equivs python3-pip
      - run: add-apt-repository -y ppa:jyrki-pulliainen/dh-virtualenv
      - run: apt-get install -y dh-virtualenv
      - install-poetry
      - checkout
      - run:
          working_directory: ~/project/
          command: |
              cp -r package/debian .
              cp package/setup.py .
              cp package/system_package_defaults.yaml brainframe/cli/defaults.yaml
              cp deployment/pyproject.toml.py310.py312 pyproject.toml
              cp deployment/poetry.lock.py310.py312 poetry.lock
      - run:
          working_directory: ~/project/
          command: |
              mk-build-deps --install debian/control
              poetry export --output requirements.txt
      - run: dpkg-buildpackage --unsigned-source --unsigned-changes --build=binary
      - run: mkdir dist
      - run: |
          export CODENAME=$(lsb_release --codename --short)
          mv ../brainframe-cli*.deb dist/brainframe-cli-${CODENAME}.deb
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist/*

  test-installation-deb:
    machine:
      image: aotuai/test-ubuntu-20.04:7d3e7d
    steps:
      - run: sudo apt-get update
      - attach_workspace:
          at: /tmp/workspace
      - run: sudo apt-get install /tmp/workspace/dist/brainframe-cli-focal.deb
      - run: sudo brainframe install --noninteractive
      - run: sudo brainframe compose up -d
      - assert-core-container-running
      - assert-core-responds-to-http
      - run: sudo brainframe uninstall --noninteractive
      - assert-uninstalled-data-preserved:
          install_path: /usr/share/brainframe
          data_path: /var/lib/brainframe

  upload-to-pypi:
    docker:
      - image: cimg/python:3.8
    environment:
      POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
    steps:
      - checkout
      - run: poetry build
      - run: POETRY_HTTP_BASIC_PYPI_PASSWORD=${PYPI_PASSWORD} poetry publish

  test-installation-source:
    machine:
      image: ubuntu-2204:2024.11.1
    resource_class: medium
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get -y install python3-pip python3-dev curl git
      - checkout
      - install-poetry
      - run:
          working_directory: ~/project/
          command: |
              cp deployment/pyproject.toml.py310.py312 pyproject.toml
              cp deployment/poetry.lock.py310.py312 poetry.lock
              sudo $(which poetry) install
      - run: sudo $(which poetry) run brainframe install --noninteractive
      - run: sudo $(which poetry) run brainframe compose up -d
      - assert-core-container-running
      - assert-core-responds-to-http
      - run: sudo $(which poetry) run brainframe uninstall --noninteractive
      - assert-uninstalled-data-preserved:
          install_path: /usr/local/share/brainframe
          data_path: /var/local/brainframe

  build-binary:
    docker:
      - image: aotuai/brainframe-cli-env-20.04:7d3e7d
    environment:
      PYTHONIOENCODING: utf8
    steps:
      - checkout
      - run:
          working_directory: /deployment
          command: |
              cp /deployment/* ~/project/
              apt-get update
              apt-get install -y binutils
              poetry config virtualenvs.in-project true
              $(which poetry) install --no-root
      - run:
          working_directory: /deployment
          command: |
              VENV_PATH=$(poetry env info --path)
              cd ~/project/
              PYTHONPATH=$PYTHONPATH:. $VENV_PATH/bin/python -m PyInstaller package/main.spec
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist/*

  upload-binary:
    docker:
      - image: cimg/python:3.8
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run: poetry install
      - run: poetry run python package/upload_binary.py --binary-path /tmp/workspace/dist/brainframe

  test-installation-binary:
    machine:
      image: ubuntu-2204:2024.11.1
    resource_class: medium
    steps:
      - run: sudo apt-get update
      - attach_workspace:
          at: /tmp/workspace
      - run: sudo cp /tmp/workspace/dist/brainframe /usr/local/bin/brainframe
      - run: sudo brainframe install --noninteractive
      - run: sudo brainframe compose up -d
      - assert-core-container-running
      - assert-core-responds-to-http
      - run: sudo brainframe uninstall --noninteractive
      - assert-uninstalled-data-preserved:
          install_path: /usr/local/share/brainframe
          data_path: /var/local/brainframe

commands:
  install-poetry:
    steps:
      - run: >
          curl -sSL https://install.python-poetry.org 
          | python3 - --version << pipeline.parameters.poetry-version >>
      # Add to the PATH
      - run: echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
  assert-core-container-running:
    steps:
      - run:
          name: Check BrainFrame core container is running
          command: |
            until docker container inspect -f {{.State.Running}}  $(docker ps -q -f name="brainframe-core") >/dev/null 2>/dev/null; do
                sleep 0.1;
            done;
            echo "BrainFrame core container is running."
          no_output_timeout: 1m
  assert-core-responds-to-http:
    steps:
      - run:
          name: Check BrainFrame core responds to HTTP requests
          command: |
            until curl -f http://localhost/api/version >/dev/null 2>/dev/null; do
              sleep 0.1;
            done;
            echo "BrainFrame core service is up."
          no_output_timeout: 1m
  assert-uninstalled-data-preserved:
    parameters:
      install_path:
        type: string
      data_path:
        type: string
    steps:
      - run:
          name: Check BrainFrame is uninstalled, but data is preserved
          command: |
            stat << parameters.data_path >>
            ! stat << parameters.install_path >>
            # Check that the images have been removed
            ! docker image ls | grep aotuai/brainframe_core
