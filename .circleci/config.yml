version: 2.1

parameters:
  poetry_version:
    type: string
    default: "1.1.4"

workflows:
  lint:
    jobs:
      - lint
  deploy:
    jobs:
      - upload_to_pypi:
          filters:
            # Ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # Run only when a tag is created
            tags:
              only: /^v.+\..+\..+/
      - build_binary
      - upload_binary
  tests:
    jobs:
      - test_installation


jobs:
  lint:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: "curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python3 - --version << pipeline.parameters.poetry_version >>"
      - run: poetry install --no-root
      - run: poetry run isort --check .
      - run: poetry run black --check .
      - run: poetry run mypy -p "brainframe.cli"
  upload_to_pypi:
    docker:
      - image: circleci/python:3.6
    environment:
      POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
    steps:
      - checkout
      - run: "curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python3 - --version << pipeline.parameters.poetry_version >>"
      - run: poetry build
      - run: POETRY_HTTP_BASIC_PYPI_PASSWORD=${PYPI_PASSWORD} poetry publish
  test_installation:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get install python3 python3-dev curl git -y
      - checkout
      - run: "curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          | python3 - --version << pipeline.parameters.poetry_version >>"
      - run: echo "export PATH=$PATH:$HOME/.poetry/bin" >> $BASH_ENV
      - run: sudo $(which poetry) install
      - run: sudo $(which poetry) run brainframe install --noninteractive
      - run: sudo $(which poetry) run brainframe compose up -d
      - run:
          name: Check BrainFrame containers are running
          command: |
            until docker container inspect -f {{.State.Running}}  $(docker ps -q -f name="brainframe_core") >/dev/null 2>/dev/null; do
                sleep 0.1;
            done;
            echo "BrainFrame core container is running."
          no_output_timeout: 1m
      - run:
          name: Check BrainFrame core service is up
          command: |
            until curl -f http://localhost/api/version >/dev/null 2>/dev/null; do
              sleep 0.1;
            done;
            echo "BrainFrame core service is up."
          no_output_timeout: 1m
      - run: sudo $(which poetry) run brainframe compose down
  build_binary:
    docker:
      # CentOS 7 is the oldest Linux distribution we unofficially support.
      # Building on here allows us to link to a very old version of libc,
      # which will work on all more modern distributions.
      - image: centos:7
    steps:
      - checkout
      - run: yum -y install python3
      - run: "curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
                | python3 - --version << pipeline.parameters.poetry_version >>"
      # get-poetry.py doesn't seem to add Poetry to PATH properly on CentOS 7
      - run: echo 'export PATH=/root/.poetry/bin:$PATH' >> $BASH_ENV
      - run: poetry install --no-root
      - run: PYTHONPATH=$PYTHONPATH:. poetry run pyinstaller deployment/main.spec
      - persist_to_workspace:
          root: .
          paths:
            - dist/brainframe
  upload_binary:
    docker:
      - image: amazon/aws-cli:2.0.14
    steps:
      - attach_workspace:
          at: /workspace
      - run: aws s3 cp /workspace/dist/brainframe s3://brainframe-releases-staging/releases/brainframe_cli/brainframe
      - run: aws cloudfront create-invalidation "$STAGING_CLOUDFRONT_DISTRIBUTION"
