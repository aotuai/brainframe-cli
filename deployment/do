#!/bin/bash
#
# Copyright (c) 2024 AOTU, Inc.  All rights reserved. Contains Dilili Labs Proprietary Information. RESTRICTED COMPUTER SOFTWARE.  LIMITED RIGHTS DATA.
#

CMDLINE=$0
CMD=$1
ARG=$2
ARGS="${@:2}"

DATE=$(date -u +"%Y-%m-%d-%H-%M-%S")

dind_help() {
        echo ""
        echo " ================== DinD test help ================="
        echo " pip install brainframe_cli_v "
        echo " export LOGNAME=root"
        echo " dockerd &"
	echo " python3 -m venv my_venv"
	echo " source my_venv/bin/activate"
        echo " brainframe install"
        echo " brainframe compose down"
        echo " ===================================================="
        echo ""
}

docker_tag_if_succeeded() {
        IMAGE=$1
        TAG=$2
        if [ $BUILD_STATUS -eq 0 ]; then
                docker tag $IMAGE:latest $IMAGE:$TAG
        fi
}

SHORT_COMMIT_ID=$(git rev-parse --short HEAD)
if [[ " $ARGS " =~ " --no-cache " ]]; then
    COMMIT=$SHORT_COMMIT_ID--no-cache
else
    COMMIT=$SHORT_COMMIT_ID
fi

build_ubuntu_docker() {
    local DOCKERFILE=$1
    local TAG_PREFIX=$2
    local UBUNTU_VERSION=$3
    local ARGS="${@:4}"

    local IMAGE_TAG="${TAG_PREFIX}-${UBUNTU_VERSION}"

    DOCKER_BUILDKIT=1 docker build \
        --file $DOCKERFILE \
        --build-arg UBUNTU_VERSION="$UBUNTU_VERSION" \
        $ARGS \
        --tag "$IMAGE_TAG" \
        .
    BUILD_STATUS=$?
    docker_tag_if_succeeded $IMAGE_TAG $COMMIT $?
}

run_docker() {
    local VOLUME=$1
    local WORKDIR=$2
    local IMAGE=$3
    local UBUNTU_VERSION=$4
    local ARG=$6
    local ARGS=${@:7}

    local IMAGE_TAG="${IMAGE}-${UBUNTU_VERSION}"

    if [[ -z "$ARG" ]]; then
	dind_help
        docker run --privileged -it --rm \
            -v ./:$VOLUME \
            -w $WORKDIR \
            "$IMAGE_TAG" \
            bash
    else
        docker run -it --rm \
            -v ./:$VOLUME \
            -w $WORKDIR \
            "$IMAGE_TAG" \
            bash \
	    $ARG \
            "$ARGS"
    fi
}

build_brainframe_cli_env() {
    local DOCKERFILE=$1
    local PYPROJECT=$2
    local POETRYLOCK=$3
    local UBUNTU_VERSION=$4
    local ADDITIONAL_ARGS=${@:5}

    local IMAGE_TAG="aotuai/brainframe-cli-env-${UBUNTU_VERSION}"

    # Build the Docker image
    DOCKER_BUILDKIT=1 docker build \
        --file "deployment/$DOCKERFILE" \
        --build-arg WORKDIR=/deployment \
        --build-arg UBUNTU_VERSION="$UBUNTU_VERSION" \
        --build-arg PYPROJECT="$PYPROJECT" \
        --build-arg POETRYLOCK="$POETRYLOCK" \
        $ADDITIONAL_ARGS \
        --tag "$IMAGE_TAG" \
        .
    BUILD_STATUS=$?
    docker_tag_if_succeeded $IMAGE_TAG $COMMIT $?
}

if [ -z $CMD ] || [ $CMD == '-h' ] || [ $CMD == '--help' ]; then
	echo " Copyright (c) 2024 AOTU, Inc. All rights reserved."
	cat $CMDLINE | grep echo | awk '(NR>13)' | awk '(NR<14)' | awk '{$1= ""; print $0}'
fi

case $CMD in

	help)
	;;

	comments_only)
	echo ┌─────── deploy brainframe-cli ──────────────────────────
	;;

        brainframe-cli-build)
        echo │ ./deployment/do brainframe-cli-build 20.04 # --no-cache
        build_ubuntu_docker deployment/Dockerfile.brainframe-cli "aotuai/brainframe-cli" $ARGS
        ;;

        ubuntu-build)
        echo │ ./deployment/do ubuntu-build 20.04 # --no-cache
        build_ubuntu_docker deployment/Dockerfile.ubuntu "aotuai/test-ubuntu" $ARGS
        ;;

        ubuntu-run)
        echo │ ./deployment/do ubuntu-run 20.04
        run_docker /brainframe-cli /brainframe-cli/dist aotuai/test-ubuntu $ARGS
        ;;

	comments_only)
	echo └────────────────────────────────────────────────────────
	echo ┌─────── build brainframe-cli ───────────────────────────
	;;

        brainframe-cli-env-build)
        echo │ ./deployment/do brainframe-cli-env-build 20.04 # --no-cache
	case $ARG in
		24.04)
		build_brainframe_cli_env Dockerfile.env.py312 pyproject.toml.py310.py312 poetry.lock.py310.py312 $ARGS
		;;

		22.04)
		build_brainframe_cli_env Dockerfile.env pyproject.toml.py310.py312 poetry.lock.py310.py312 $ARGS
		;;

		20.04)
		build_brainframe_cli_env Dockerfile.env pyproject.toml.py38 poetry.lock.py38 $ARGS
		;;

		18.04)
		build_brainframe_cli_env Dockerfile.env.py36 pyproject.toml.py36 poetry.lock.py36 $ARGS --build-arg POETRY_VERSION="1.1.14"
		;;
	esac
        ;;

        brainframe-cli-env-run)
        echo │ ./deployment/do brainframe-cli-env-run 20.04
	run_docker /brainframe-cli /deployment brainframe-cli-env $ARGS
        ;;

        brainframe-cli-lint)
        echo │ ./deployment/do brainframe-cli-lint 20.04
        run_docker /brainframe-cli /deployment brainframe-cli-env $ARG bash -c "
            cp /deployment/* /brainframe-cli/ &&
            poetry run black /brainframe-cli/ &&
            poetry run isort /brainframe-cli/ &&
            MYPYPATH=/brainframe-cli/ poetry run mypy --config-file /brainframe-cli/mypy.ini -p 'brainframe.cli'
            "
        ;;

        brainframe-cli-build-wheel)
        echo │ ./deployment/do brainframe-cli-build-wheel 20.04
	case $ARG in
		24.04)
		PYTHON_TAG="3.10 3.12"
		;;

		22.04)
		PYTHON_TAG="3.10 3.12"
		;;

		20.04)
		PYTHON_TAG=3.8
		;;

		18.04)
		PYTHON_TAG=3.6
		;;
	esac
	# build pip wheel
	run_docker /brainframe-cli /brainframe-cli brainframe-cli-env $ARG bash -c "
            cp /deployment/* /brainframe-cli/ &&
            python3 deployment/build.py --versions $PYTHON_TAG
            "
        ;;

        brainframe-cli-build-pyinstaller)
        echo │ ./deployment/do brainframe-cli-build-pyinstaller 20.04
        # build pyinstaller 
        run_docker /brainframe-cli /brainframe-cli brainframe-cli-env $ARG bash -c "
            apt-get update &&
            apt-get install -y binutils &&
            cd /deployment &&
            poetry config virtualenvs.in-project true &&
            poetry install --no-root &&
            VENV_PATH=\$(poetry env info --path) &&
            cd /brainframe-cli &&
            PYTHONPATH=\$PYTHONPATH:. \$VENV_PATH/bin/python -m PyInstaller package/main.spec
            "
        ;;

        brainframe-cli-build-dpkg)
        echo │ ./deployment/do brainframe-cli-build-dpkg 20.04
	case $ARG in
		24.04)
		PYTHON_TAG=py310.py312
		;;

		22.04)
		PYTHON_TAG=py310.py312
		;;

		20.04)
		PYTHON_TAG=py38
		;;

		18.04)
		PYTHON_TAG=py36
		;;
	esac
        # build deb
        run_docker /brainframe-cli /brainframe-cli brainframe-cli-env $ARG bash -c "
	    cd /brainframe-cli/ &&
	    cp -r package/debian . &&
	    cp package/setup.py . &&
	    cp package/system_package_defaults.yaml brainframe/cli/defaults.yaml &&
	    cp deployment/pyproject.toml.$PYTHON_TAG pyproject.toml &&
	    cp deployment/poetry.lock.$PYTHON_TAG poetry.lock &&
	    mk-build-deps --install debian/control &&
	    poetry export --output requirements.txt &&
            PATH=./deployment:\$PATH dpkg-buildpackage --unsigned-source --unsigned-changes --build=binary
            "
        ;;

	comments_only)
	echo └────────────────────────────────────────────────────────
	;;

esac

nice_day_var=$((1 + $RANDOM % 10))

if [ $(($nice_day_var%2)) -eq 0 ]; then
	echo
	echo Have a nice day!
else
	echo
	echo You are the best!
fi
